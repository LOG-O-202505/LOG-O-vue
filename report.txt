# 관심 장소(위시리스트) 관리 시스템 분석 보고서

## 1. 개요

본 보고서는 'logo-vue' 프로젝트에서 구현된 관심 장소(위시리스트) 관리 시스템의 동작 방식과 주요 기능을 분석한 내용을 담고 있습니다. 특히 `TripPlan.vue`와 `LogoSearch.vue` 컴포넌트에서 사용자의 관심 장소를 어떻게 관리하고 있는지 중점적으로 살펴보았습니다.

## 2. 주요 컴포넌트 및 기능

### 2.1 TripPlan.vue

`TripPlan.vue`는 사용자가 여행 계획을 생성하고 관리하는 핵심 컴포넌트입니다. 여행 기본 정보 설정, 일정 계획, 경비 관리, 방문 인증 등 다양한 기능을 제공합니다.

#### 주요 기능:
1. **여행 기본 정보 관리**: 여행 제목, 목적지, 날짜, 인원, 예산 등 관리
2. **일정별 장소 관리**: 날짜별로 방문할 장소 추가 및 관리
3. **관심 장소(위시리스트) 관리**: 자주 방문하거나 관심 있는 장소를 저장 및 관리
4. **지도 통합**: 카카오맵 API를 활용한 위치 시각화
5. **방문 인증 시스템**: 방문한 장소에 대한 사진 업로드 및 인증

### 2.2 LogoSearch.vue

`LogoSearch.vue`는 이미지 분석을 통해 유사한 여행지를 추천하는 컴포넌트로, 검색 결과에서 관심 장소를 추가하거나 제거할 수 있는 기능을 제공합니다.

#### 주요 기능:
1. **이미지 기반 검색**: 이미지 업로드 및 분석을 통한 유사 여행지 검색
2. **검색 결과 관리**: 검색된 여행지 목록 표시 및 관리
3. **관심 장소 토글**: 검색 결과에서 관심 장소 추가/제거
4. **장소 상세 정보**: 선택한 장소의 상세 정보 및 통계 제공

## 3. 관심 장소(위시리스트) 관리 시스템 상세 분석

### 3.1 데이터 구조

관심 장소는 다음과 같은 구조로 저장됩니다:

```javascript
// 서버에서 가져온 원본 형태
{
  place: {
    puid: Number,        // 장소 고유 ID
    name: String,        // 장소 이름
    address: String,     // 장소 주소
    latitude: Number,    // 위도
    longitude: Number,   // 경도
  },
  uluid: Number          // 사용자 관심 장소 고유 ID
}

// 클라이언트에서 변환한 형태 (TripPlan.vue에서 사용)
{
  id: Number,            // place.puid 값
  place_name: String,    // place.name 값
  address_name: String,  // place.address 값
  x: String,             // place.longitude 값 (문자열로 변환)
  y: String,             // place.latitude 값 (문자열로 변환)
  uluid: Number          // 원본 uluid 값
}
```

### 3.2 관심 장소 관리 API

프로젝트에서는 다음과 같은 API를 활용하여 관심 장소를 관리합니다:

1. **getUserLikes()**: 사용자의 관심 장소 목록을 가져옴
2. **addUserLike(placeData)**: 새로운 관심 장소 추가
3. **removeUserLike(uluid)**: uluid를 기준으로 관심 장소 제거
4. **removeUserLikeByAddress(address)**: 주소를 기준으로 관심 장소 제거

### 3.3 관심 장소 판별 로직

#### TripPlan.vue에서의 판별 로직:

```javascript
const isInWishlist = (place) => {
  // address_name을 기준으로 비교 (API 응답 데이터와 카카오 검색 결과 매칭)
  return wishlistPlaces.value.some(p => 
    p.address_name === (place.address_name || place.road_address_name)
  );
};
```

TripPlan.vue에서는 **주소를 기준으로** 관심 장소 여부를 판별합니다. 카카오맵 API에서 반환하는 주소(address_name 또는 road_address_name)와 위시리스트에 저장된 주소(address_name)를 비교하여 일치하는 경우 관심 장소로 판별합니다.

#### LogoSearch.vue에서의 판별 로직:

```javascript
const isInWishlist = (searchResultItem) => {
  // 객체가 전달된 경우 (PlaceDetailModal에서 호출)
  const address = searchResultItem._source ? 
    searchResultItem._source.p_address : searchResultItem.address;
  const name = searchResultItem._source ? 
    searchResultItem._source.p_name : searchResultItem.name;
  
  // 주소와 이름이 모두 일치하는 경우에만 true (TripPlan.vue와 동일한 방식)
  return userLikes.value.some(like => 
    like.place && 
    like.place.address === address && 
    like.place.name === name
  );
};
```

LogoSearch.vue에서는 **주소와 이름을 모두 비교하여** 관심 장소 여부를 판별합니다. 이는 보다 엄격한 기준으로, 주소만 같고 이름이 다른 경우나 이름만 같고 주소가 다른 경우에는 같은 장소로 인식하지 않습니다.

### 3.4 관심 장소 추가 프로세스

관심 장소 추가 시 다음과 같은 프로세스가 진행됩니다:

1. 장소의 위도/경도 정보 확인
2. 역지오코딩(Reverse Geocoding)을 통해 행정구역 코드(region, sig) 추출
3. 장소 데이터 구조화:
   ```javascript
   const placeData = {
     address: String,   // 장소 주소
     region: Number,    // 시/도 코드
     sig: Number,       // 시/군/구 코드
     name: String,      // 장소 이름
     latitude: Number,  // 위도
     longitude: Number, // 경도
   };
   ```
4. API 호출을 통한 서버 저장
5. 응답 데이터를 기반으로 로컬 상태(userLikes 또는 wishlistPlaces) 업데이트

### 3.5 관심 장소 제거 프로세스

관심 장소 제거는 두 가지 방법으로 이루어집니다:

1. **uluid 기반 제거 (TripPlan.vue)**:
   - 관심 장소의 고유 ID(uluid)를 사용하여 제거
   - `removeUserLike(uluid)` API 호출

2. **주소 기반 제거 (LogoSearch.vue)**:
   - 장소의 주소를 사용하여 제거
   - `removeUserLikeByAddress(address)` API 호출

## 4. 두 컴포넌트 간 차이점 및 개선 방향

### 4.1 차이점

1. **판별 기준**:
   - TripPlan.vue: 주소만 비교
   - LogoSearch.vue: 주소와 이름 모두 비교

2. **데이터 구조**:
   - TripPlan.vue: 카카오맵 API와 호환되는 형태로 변환하여 사용
   - LogoSearch.vue: 서버에서 받은 원본 형태 그대로 사용

3. **제거 방법**:
   - TripPlan.vue: uluid 기반 제거
   - LogoSearch.vue: 주소 기반 제거

### 4.2 개선 방향

1. **일관된 판별 기준 적용**:
   - 두 컴포넌트에서 동일한 판별 기준 사용 (주소+이름 또는 고유 ID 기반)

2. **데이터 구조 통일**:
   - 공통 유틸리티 함수를 통해 일관된 데이터 구조 유지

3. **제거 방법 통일**:
   - 가능한 uluid 기반 제거 방식으로 통일 (더 안정적이고 의도치 않은 제거 방지)

4. **중앙화된 상태 관리**:
   - Vuex 스토어를 활용하여 관심 장소 상태를 중앙에서 관리

## 5. 카카오맵 SDK 로딩 방식

현재 프로젝트에서는 카카오맵 SDK를 로드하는 방식이 일관되지 않습니다:

1. **중앙화된 로더(kakaoMapLoader.js)**: 
   - 최신 방식으로, 로딩 상태 관리 및 라이브러리 옵션 지정 기능 제공
   - 재사용성이 높고 유지보수가 용이함

2. **개별 컴포넌트 내 로딩 함수**:
   - LogoSearch.vue에서는 아직 내부 함수(`loadKakaoMapsScript`)를 사용하여 SDK 로드
   - 코드 중복 및 비일관성 문제 발생

### 개선 방향:
- 모든 컴포넌트에서 중앙화된 로더(kakaoMapLoader.js)를 사용하도록 리팩토링
- SDK 로딩 관련 코드 중복 제거
- 일관된 오류 처리 및 로딩 상태 관리 구현

## 6. 결론

'logo-vue' 프로젝트의 관심 장소 관리 시스템은 사용자가 여행 계획을 수립하고 관심 있는 장소를 저장하는 데 효과적인 기능을 제공합니다. 그러나 일부 비일관성과 코드 중복이 존재하며, 이를 개선함으로써 더 안정적이고 유지보수가 용이한 시스템으로 발전시킬 수 있을 것입니다.

특히 관심 장소 판별 기준과 데이터 구조를 통일하고, 중앙화된 카카오맵 SDK 로더를 전체 프로젝트에 적용하는 것이 시급한 개선 과제로 보입니다.
