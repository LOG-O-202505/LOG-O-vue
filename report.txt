# logo-vue 프로젝트 상세 분석 보고서

## 1. 개요

본 보고서는 'logo-vue' 프로젝트의 주요 페이지 및 기능을 상세히 분석하고, 실제 서비스와의 차이점을 평가한 내용을 담고 있습니다. 특히 여행 계획 관리 및 이미지 기반 검색 기능을 중심으로, 사용자 경험 및 기술적 구현 방식을 중점적으로 살펴보았습니다. 또한 관심 장소(위시리스트) 관리 시스템의 동작 방식을 `TripPlan.vue`와 `LogoSearch.vue` 컴포넌트를 통해 심층적으로 분석했습니다.

## 2. 페이지별 상세 분석

본 프로젝트는 총 7개의 주요 페이지로 구성되어 있으며, 각 페이지는 고유한 기능을 제공합니다. 아래는 각 페이지의 상세 분석입니다.

### 2.1 온보딩 페이지(OnboardingPage.vue)

#### 기능 설명:
- 프로젝트의 첫 화면으로, 사용자에게 서비스의 주요 기능을 소개
- 배경 비디오와 애니메이션 효과를 통한 시각적 매력 제공
- 주요 기능(HOT PLACE, SEARCH, KEYWORD)으로의 네비게이션 링크 제공
- 로그인/로그아웃 기능 및 개인화된 여행 페이지(MY JOURNEY)로의 접근 제공

#### 특징 및 차별점:
- 역동적인 배경 비디오를 통한 몰입감 있는 사용자 경험 제공
- 반응형 디자인으로 다양한 디바이스에서의 최적화된 표시
- 사용자 로그인 상태에 따른 조건부 UI 렌더링

#### 실제 서비스와의 차이점:
- 대부분의 상용 여행 서비스(트립어드바이저, 익스피디아 등)는 검색 기능을 온보딩 페이지 중앙에 배치하는 반면, 이 프로젝트는 비주얼에 초점을 맞춘 접근 방식 채택
- 상용 서비스에 비해 정보 밀도가 낮고 시각적 요소에 더 집중

### 2.2 이미지 기반 검색 페이지(LogoSearch.vue / ImgSearch.vue)

#### 기능 설명:
- 사용자가 업로드한 이미지를 분석하여 유사한 분위기의 여행지 추천
- 이미지에서 특성 벡터(feature vector)를 추출하여 Elasticsearch를 통한 유사도 검색
- 검색 결과에 대한 관심 장소 추가/제거 기능
- 선택한 장소의 상세 정보 및 방문 통계 제공

#### 특징 및 차별점:
- AI 기반 이미지 분석을 통한 혁신적인 여행지 추천 방식
- 10개의 차원(자연 요소, 도시 특성, 수경 요소 등)을 통한 정교한 이미지 특성 분석
- 사용자 방문 통계를 활용한 연령대/성별 인구통계 정보 제공

#### 실제 서비스와의 차이점:
- 기존 상용 여행 서비스(구글 트립스, 에어비앤비 등)는 텍스트 기반 검색이 주를 이루는 반면, 이 프로젝트는 이미지 기반 검색에 중점
- 프로토타입 수준의 서비스로, 상용 서비스에 비해 검색 결과의 다양성과 정확도에 제한이 있음
- 실시간 이미지 처리 지연 시간이 상용 서비스 대비 길다는 한계 존재

### 2.3 인기 장소 둘러보기(LookAround.vue)

#### 기능 설명:
- 방문 횟수 기준으로 인기 있는 여행지 목록 제공
- 카테고리별 필터링 및 정렬 기능
- 관심 장소 추가/제거 기능
- 장소 상세 정보 및 지도 표시

#### 특징 및 차별점:
- 실제 사용자 방문 데이터를 기반으로 한 인기 장소 선정
- 시각적으로 매력적인 카드 형태의 UI
- 카카오맵 API를 활용한 위치 정보 시각화

#### 실제 서비스와의 차이점:
- 상용 서비스(트립어드바이저, 네이버 플레이스 등)는 사용자 리뷰와 평점을 중심으로 인기 장소를 선정하는 반면, 이 프로젝트는 방문 횟수에 중점
- 필터링 옵션이 상용 서비스에 비해 제한적
- 커뮤니티 요소(리뷰, 댓글 등)가 상대적으로 부족

### 2.4 키워드 검색 페이지(KeywordSearch.vue)

#### 기능 설명:
- 키워드 기반 여행지 검색 기능
- 자동 완성 및 추천 키워드 제공
- 검색 결과 필터링 및 정렬
- 장소 상세 정보 및 관심 장소 관리

#### 특징 및 차별점:
- Elasticsearch를 활용한 효율적인 전문 검색(Full-text search)
- 키워드 관련성에 따른 결과 정렬
- 직관적인 사용자 인터페이스

#### 실제 서비스와의 차이점:
- 상용 서비스에 비해 검색 알고리즘의 정교함이 다소 부족
- 맥락 이해 기능(검색 의도 파악)이 제한적
- 검색 히스토리 및 개인화된 추천 기능 부재

### 2.5 내 여행 관리 페이지(MyTravel.vue)

#### 기능 설명:
- 사용자의 여행 계획 목록 표시
- 새로운 여행 계획 생성 기능
- 여행 취향 프로필(레이더 차트) 제공
- 방문한 지역 통계 및 지도 시각화

#### 특징 및 차별점:
- D3.js를 활용한 인터랙티브 지도 시각화
- 사용자의 여행 데이터를 기반으로 한 취향 프로필 자동 생성
- 시/도 및 시/군/구 단위의 상세 방문 통계

#### 실제 서비스와의 차이점:
- 상용 서비스(트립닷컴, 익스피디아 등)는 예약 관리에 중점을 두는 반면, 이 프로젝트는 여행 취향 분석과 방문 통계에 초점
- 여행 일정 공유 및 협업 기능이 제한적
- 여행 보험, 항공권 예약 등 실질적인 여행 준비 기능 부재

### 2.6 여행 계획 페이지(TripPlan.vue)

#### 기능 설명:
- 특정 여행에 대한 상세 계획 수립 및 관리
- 날짜별 일정 계획 및 지도 시각화
- 장소 검색 및 일정 추가
- 방문 인증 및 리뷰 작성
- 여행 경비 관리

#### 특징 및 차별점:
- 카카오맵 API를 활용한 일정의 지도 시각화 및 경로 표시
- GPS 기반 방문 인증 시스템
- 이미지 분석을 통한 방문 장소 특성 추출
- 영수증 이미지 인식을 통한 자동 경비 입력

#### 실제 서비스와의 차이점:
- 상용 서비스(구글 트립스, 트립잇 등)에 비해 AI 기반 기능(이미지 분석, 영수증 인식)이 더 혁신적
- 방문 인증 시스템은 상용 서비스에서 찾아보기 어려운 독특한 기능
- 경로 최적화 및 대중교통 연계 기능이 상대적으로 부족

## 3. 관심 장소(위시리스트) 관리 시스템 상세 분석

'logo-vue' 프로젝트에서 특히 중점적으로 살펴볼 부분은 관심 장소(위시리스트) 관리 시스템입니다. 이 시스템은 여러 컴포넌트에서 공통으로 사용되지만, 특히 `TripPlan.vue`와 `LogoSearch.vue`에서 핵심적으로 구현되어 있습니다.

### 3.1 데이터 구조

관심 장소는 다음과 같은 구조로 저장됩니다:

```javascript
// 서버에서 가져온 원본 형태
{
  place: {
    puid: Number,        // 장소 고유 ID
    name: String,        // 장소 이름
    address: String,     // 장소 주소
    latitude: Number,    // 위도
    longitude: Number,   // 경도
  },
  uluid: Number          // 사용자 관심 장소 고유 ID
}

// 클라이언트에서 변환한 형태 (TripPlan.vue에서 사용)
{
  id: Number,            // place.puid 값
  place_name: String,    // place.name 값
  address_name: String,  // place.address 값
  x: String,             // place.longitude 값 (문자열로 변환)
  y: String,             // place.latitude 값 (문자열로 변환)
  uluid: Number          // 원본 uluid 값
}
```

### 3.2 관심 장소 관리 API

프로젝트에서는 다음과 같은 API를 활용하여 관심 장소를 관리합니다:

1. **getUserLikes()**: 사용자의 관심 장소 목록을 가져옴
2. **addUserLike(placeData)**: 새로운 관심 장소 추가
3. **removeUserLike(uluid)**: uluid를 기준으로 관심 장소 제거
4. **removeUserLikeByAddress(address)**: 주소를 기준으로 관심 장소 제거

### 3.3 관심 장소 판별 로직

#### TripPlan.vue에서의 판별 로직:

```javascript
const isInWishlist = (place) => {
  // address_name을 기준으로 비교 (API 응답 데이터와 카카오 검색 결과 매칭)
  return wishlistPlaces.value.some(p => 
    p.address_name === (place.address_name || place.road_address_name)
  );
};
```

TripPlan.vue에서는 **주소를 기준으로** 관심 장소 여부를 판별합니다. 카카오맵 API에서 반환하는 주소(address_name 또는 road_address_name)와 위시리스트에 저장된 주소(address_name)를 비교하여 일치하는 경우 관심 장소로 판별합니다.

#### LogoSearch.vue에서의 판별 로직:

```javascript
const isInWishlist = (searchResultItem) => {
  // 객체가 전달된 경우 (PlaceDetailModal에서 호출)
  const address = searchResultItem._source ? 
    searchResultItem._source.p_address : searchResultItem.address;
  const name = searchResultItem._source ? 
    searchResultItem._source.p_name : searchResultItem.name;
  
  // 주소와 이름이 모두 일치하는 경우에만 true (TripPlan.vue와 동일한 방식)
  return userLikes.value.some(like => 
    like.place && 
    like.place.address === address && 
    like.place.name === name
  );
};
```

LogoSearch.vue에서는 **주소와 이름을 모두 비교하여** 관심 장소 여부를 판별합니다. 이는 보다 엄격한 기준으로, 주소만 같고 이름이 다른 경우나 이름만 같고 주소가 다른 경우에는 같은 장소로 인식하지 않습니다.

### 3.4 관심 장소 추가 프로세스

관심 장소 추가 시 다음과 같은 프로세스가 진행됩니다:

1. 장소의 위도/경도 정보 확인
2. 역지오코딩(Reverse Geocoding)을 통해 행정구역 코드(region, sig) 추출
3. 장소 데이터 구조화:
   ```javascript
   const placeData = {
     address: String,   // 장소 주소
     region: Number,    // 시/도 코드
     sig: Number,       // 시/군/구 코드
     name: String,      // 장소 이름
     latitude: Number,  // 위도
     longitude: Number, // 경도
   };
   ```
4. API 호출을 통한 서버 저장
5. 응답 데이터를 기반으로 로컬 상태(userLikes 또는 wishlistPlaces) 업데이트

### 3.5 관심 장소 제거 프로세스

관심 장소 제거는 두 가지 방법으로 이루어집니다:

1. **uluid 기반 제거 (TripPlan.vue)**:
   - 관심 장소의 고유 ID(uluid)를 사용하여 제거
   - `removeUserLike(uluid)` API 호출

2. **주소 기반 제거 (LogoSearch.vue)**:
   - 장소의 주소를 사용하여 제거
   - `removeUserLikeByAddress(address)` API 호출

## 4. 기술 스택 및 구현 방식 분석

### 4.1 프론트엔드 기술 스택

'logo-vue' 프로젝트는 다음과 같은 프론트엔드 기술 스택을 활용하고 있습니다:

1. **Vue.js 3**: 컴포넌트 기반 UI 개발을 위한 프레임워크
2. **Vue Router 4**: SPA(Single Page Application) 라우팅 관리
3. **Vuex 4**: 중앙 집중식 상태 관리
4. **SCSS/Sass**: 확장된 CSS 전처리기로 스타일 관리
5. **D3.js**: 데이터 시각화 및 인터랙티브 지도 구현
6. **Chart.js**: 통계 데이터 차트 시각화
7. **Tesseract.js**: 영수증 이미지 OCR(광학 문자 인식)
8. **EXIF-js**: 이미지 메타데이터 추출(방문 인증 시 GPS 정보 활용)

### 4.2 외부 API 통합

프로젝트에서 활용하는 주요 외부 API 및 서비스는 다음과 같습니다:

1. **카카오맵 API**: 
   - 지도 표시 및 위치 검색
   - 역지오코딩(좌표→주소 변환)
   - 장소 검색 및 정보 제공

2. **Elasticsearch**: 
   - 여행지 데이터 검색 및 인덱싱
   - 벡터 유사도 검색(이미지 기반 여행지 추천)
   - 텍스트 기반 키워드 검색

3. **AI 모델 API**: 
   - 이미지 분석 및 특성 벡터 추출
   - 텍스트 생성 및 분석(여행지 설명 생성)

4. **소셜 로그인 API**:
   - 구글 OAuth 2.0 인증

### 4.3 주요 구현 기술 및 패턴

#### 4.3.1 Composition API

Vue 3의 Composition API를 활용하여 기능별 로직을 모듈화하고 재사용성을 높였습니다. 특히 `setup()` 함수 내에서 관련 기능을 그룹화하여 코드 가독성과 유지보수성을 향상시켰습니다.

```javascript
// 관심 장소 관리 로직 예시
const userLikes = ref([]);

const loadUserLikes = async () => {
  // API에서 관심 장소 로드
};

const isInWishlist = (item) => {
  // 관심 장소 여부 판별
};

const toggleWishlist = async (item) => {
  // 관심 장소 추가/제거
};
```

#### 4.3.2 반응형 데이터 관리

`ref`와 `computed` 등의 반응형 API를 활용하여 데이터 변경에 따른 UI 업데이트를 효율적으로 처리합니다.

```javascript
const searchResults = ref([]);
const sortedSearchResults = computed(() => {
  return [...searchResults.value].sort((a, b) => b._score - a._score);
});
```

#### 4.3.3 비동기 작업 처리

API 호출, 이미지 처리 등 비동기 작업에 `async/await`와 `Promise`를 적극 활용하고, 로딩 상태 및 오류 처리를 체계적으로 구현했습니다.

```javascript
const analyzeCurrentImage = async () => {
  try {
    isLoading.value = true;
    // 비동기 처리 로직
  } catch (error) {
    // 오류 처리
  } finally {
    isLoading.value = false;
  }
};
```

#### 4.3.4 코드 분할 및 모듈화

API 호출, 유틸리티 함수, 상태 관리 등을 별도 모듈로 분리하여 코드 재사용성과 유지보수성을 높였습니다:

- `services/api.js`: API 호출 함수 모음
- `services/auth.js`: 인증 관련 API 함수
- `utils/mapUtils.js`: 지도 관련 유틸리티 함수
- `utils/kakaoMapLoader.js`: 카카오맵 SDK 로딩 유틸리티

### 4.4 실제 서비스와의 기술적 차이점

#### 4.4.1 확장성 및 성능 최적화

실제 상용 서비스와 비교했을 때, 다음과 같은 기술적 차이점이 있습니다:

1. **서버 사이드 렌더링(SSR) 부재**: 
   - 현재 프로젝트는 클라이언트 사이드 렌더링만 지원하여 초기 로딩 성능과 SEO에 불리함
   - 상용 서비스는 Nuxt.js 등을 활용한 SSR/SSG 구현이 일반적

2. **코드 스플리팅 최적화 부족**:
   - 현재 프로젝트는 페이지 단위 코드 스플리팅만 구현
   - 상용 서비스는 컴포넌트 레벨의 세밀한 코드 스플리팅 적용

3. **이미지 최적화 제한**:
   - 현재 프로젝트는 기본적인 이미지 처리만 구현
   - 상용 서비스는 반응형 이미지, WebP 포맷, 지연 로딩 등 다양한 최적화 기법 적용

#### 4.4.2 보안 및 인증

1. **보안 취약점 대응**:
   - 현재 프로젝트는 기본적인 인증 처리만 구현
   - 상용 서비스는 CSRF 방지, XSS 방어, 입력 검증 등 포괄적인 보안 대책 적용

2. **다양한 인증 방식**:
   - 현재 프로젝트는 소셜 로그인(구글)만 지원
   - 상용 서비스는 다중 인증(MFA), 생체 인증 등 다양한 인증 옵션 제공

#### 4.4.3 프로그레시브 웹 앱(PWA) 기능

현재 프로젝트는 PWA 기능을 구현하지 않아 오프라인 지원, 홈 화면 설치, 푸시 알림 등의 기능이 부재합니다. 반면 대부분의 상용 여행 서비스는 PWA 기능을 지원하여 모바일 사용자 경험을 향상시키고 있습니다.

## 5. 시스템 간 비일관성 및 개선 방향

### 5.1 관심 장소 관리 시스템의 비일관성

'logo-vue' 프로젝트에서 관심 장소 관리 시스템은 여러 컴포넌트에서 사용되지만, 구현 방식에 일관성이 부족합니다:

#### 5.1.1 컴포넌트 간 차이점

1. **판별 기준**:
   - TripPlan.vue: 주소만 비교
   - LogoSearch.vue: 주소와 이름 모두 비교

2. **데이터 구조**:
   - TripPlan.vue: 카카오맵 API와 호환되는 형태로 변환하여 사용
   - LogoSearch.vue: 서버에서 받은 원본 형태 그대로 사용

3. **제거 방법**:
   - TripPlan.vue: uluid 기반 제거
   - LogoSearch.vue: 주소 기반 제거

#### 5.1.2 관심 장소 관리 개선 방향

1. **일관된 판별 기준 적용**:
   - 두 컴포넌트에서 동일한 판별 기준 사용 (주소+이름 또는 고유 ID 기반)

2. **데이터 구조 통일**:
   - 공통 유틸리티 함수를 통해 일관된 데이터 구조 유지

3. **제거 방법 통일**:
   - 가능한 uluid 기반 제거 방식으로 통일 (더 안정적이고 의도치 않은 제거 방지)

4. **중앙화된 상태 관리**:
   - Vuex 스토어를 활용하여 관심 장소 상태를 중앙에서 관리

### 5.2 카카오맵 SDK 로딩 방식의 비일관성

현재 프로젝트에서는 카카오맵 SDK를 로드하는 방식이 일관되지 않습니다:

1. **중앙화된 로더(kakaoMapLoader.js)**: 
   - 최신 방식으로, 로딩 상태 관리 및 라이브러리 옵션 지정 기능 제공
   - 재사용성이 높고 유지보수가 용이함

2. **개별 컴포넌트 내 로딩 함수**:
   - LogoSearch.vue에서는 아직 내부 함수(`loadKakaoMapsScript`)를 사용하여 SDK 로드
   - 코드 중복 및 비일관성 문제 발생

#### 5.2.1 SDK 로딩 개선 방향:
- 모든 컴포넌트에서 중앙화된 로더(kakaoMapLoader.js)를 사용하도록 리팩토링
- SDK 로딩 관련 코드 중복 제거
- 일관된 오류 처리 및 로딩 상태 관리 구현

### 5.3 사용자 경험 관련 비일관성

1. **UI/UX 스타일**:
   - 컴포넌트마다 버튼 스타일, 색상 체계, 애니메이션 효과 등이 다소 상이함
   - 정보 표시 방식(카드, 목록, 테이블)이 페이지별로 통일성 부족

2. **에러 처리 방식**:
   - 일부 컴포넌트는 ToastMessage 컴포넌트 사용
   - 일부 컴포넌트는 alert() 사용
   - 일부는 인라인 에러 메시지 표시

#### 5.3.1 사용자 경험 개선 방향:
- 디자인 시스템 도입으로 UI 요소의 일관성 확보
- 전역 에러 처리 메커니즘 구현
- 사용자 피드백 메시지 표시 방식 통일
